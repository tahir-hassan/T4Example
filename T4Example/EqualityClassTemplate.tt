<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace <#= NamespaceName #>
{
    partial class <#= ClassName #> 
    {
        public override bool Equals(object other)
        {
            return Equals(other as <#= ClassName #>); 
        }

        public static bool operator==(<#= ClassName #> left, <#= ClassName #> right)
        {
            if (ReferenceEquals(left, right))
                return true;
            else if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;
            else
                return left.Equals(right);
        }

        public static bool operator!=(<#= ClassName #> left, <#= ClassName #> right)
        {
            if (ReferenceEquals(left, right))
                return false;
            else if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return true;
            else
                return !left.Equals(right);
        }

		<#  foreach (var p in GetProperties(RelativePath)) 
	{ #>
		<#= GetPropertyText(p) #>
	<# } #>
    }
} 

<#+
	private EnvDTE.DTE GetEnvDTE() 
	{ 
		return (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE; 
	}

	private EnvDTE.ProjectItem GetProjectItem(string path) 
	{
		var currentDir = System.IO.Path.GetDirectoryName(this.Host.TemplateFile);
		var fullPath = System.IO.Path.Combine(currentDir, path);

		var dte = GetEnvDTE();
		return dte.Solution.FindProjectItem(fullPath);
    }

	private void FindProperties(CodeElements elements, IList<CodeProperty> properties)
	{
		foreach (CodeElement element in elements)
		{
			CodeProperty property = element as CodeProperty;
			if (property != null)
			{
				properties.Add(property);
			} 
			FindProperties(element.Children, properties);
		}
	}
	
	private IList<CodeProperty> GetProperties(string csFile)
	{
		ProjectItem projectItem = GetProjectItem(csFile);
		FileCodeModel codeModel = projectItem.FileCodeModel;
		var propertyList = new List<CodeProperty>();
		FindProperties(codeModel.CodeElements, propertyList);
		return propertyList;
	}

	private string GetPropertyText(CodeProperty codeItem) {
		return codeItem.StartPoint.CreateEditPoint().GetText(codeItem.EndPoint);
    }

    public string RelativePath { get; set; }
	public string NamespaceName  { get; set; }
	public string ClassName  { get; set; }
#>